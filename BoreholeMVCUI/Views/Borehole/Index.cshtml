@using BoreholeMVCUI.Models.Enums
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model IEnumerable<BoreholeViewModel>
@{
    ViewData["Title"] = "Borehole List";
}
<div class="container">
    <div class="row">
        <div class="col">
            <div id="AddBoreholeButton" class="btn btn-outline-primary">@Html.ActionLink("Add Cable Borehole", "AddCable")</div>
            <div id="AddBoreholeButton" class="btn btn-outline-primary">@Html.ActionLink("Add Drill Borehole", "AddDrill")</div>
            <div id="BoreholeData" class="">
                <table class="BoreholeTableGrid">
                    <thead>
                        <tr>
                            <td>Type</td>
                            <td>@Html.DisplayNameFor(bh => bh.FirstOrDefault().Id)</td>
                            <td>@Html.DisplayNameFor(bh => bh.FirstOrDefault().X)</td>
                            <td>@Html.DisplayNameFor(bh => bh.FirstOrDefault().Y)</td>
                            <td>@Html.DisplayNameFor(bh => bh.FirstOrDefault().Depth)</td>
                            <td>Options</td>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (BoreholeViewModel vm in Model)
                    {
                        <tr onclick="location.href = '@Url.Action("Details", "Borehole", new { id=vm.Id })'">
                            @if(vm.BoreholeType == BoreholeMVCUI.Models.Enums.BoreholeType.Cable)
                            {
                                <td><i class="fa-solid fa-bore-hole"></i></td>
                            }
                            else if (vm.BoreholeType == BoreholeMVCUI.Models.Enums.BoreholeType.Drill)
                            {
                                <td><i class="fa-solid fa-arrows-down-to-line"></i></td>
                            }
                            else
                            {
                                <td><i class="fa-solid fa-ring"></i></td>
                            }
                            <td>@Html.DisplayFor(bh => vm.Id)</td>
                            <td>@Html.DisplayFor(bh => vm.X)</td>
                            <td>@Html.DisplayFor(bh => vm.Y)</td>
                            <td>@Html.DisplayFor(bh => vm.Depth)</td>
                            <td onClick='event.stopPropagation();'><button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-id="@vm.Id">Delete</button></td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        @if (ViewBag.ShowMap)
        {
            <div class="col" id="map">
                @await Html.PartialAsync("_Map", Model)
            </div>
        }
        else
        {
            @Html.ActionLink("Back to Index", "Index")
        }
    </div>
</div>
<div id="deleteModal" class="modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5>Delete Borehole</h5>
            </div>
            <div class="modal-body">
                <div id="deleteMessage">Are you sure you want to delete this borehole?</div>
            </div>
            <div class="modal-footer">
                <button type="button" id="deleteButton" class="btn btn-primary">Delete</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        var modal = $("#deleteModal");
        modal.on('show.bs.modal', function (event) {

            var button = event.relatedTarget;
            var boreholeId = button.getAttribute('data-bs-id');

            var modalMessage = "Are you sure you want to delete borehole with ID " + boreholeId;
            modal.find(".modal-body #deleteMessage").text(modalMessage);
            modal.find(".modal-footer #deleteButton").on("click", function () { location.href = "@Url.Action("Delete", "Borehole")/" + boreholeId; });
        });

        modal.on('hide.bs.modal', function (event) {
            modal.find(".modal-footer #deleteButton").unbind('click');
        });

        @{
            int maxX = Model.Count() > 0 ? Model.Max(i => i.X) : 0;
            int maxY = Model.Count() > 0 ? Model.Max(i => i.Y) : 0;

            decimal factor = 0;
            if (maxX > 0 && maxY > 0)
            {
                factor = 500 / (maxX < maxY ? maxY : maxX);
            }
        }

        var start = null;
        var startCoord = null;

        function draw() {
            const canvas = $("#canvasMap");
            if (canvas[0].getContext) {
                const ctx = canvas[0].getContext("2d");

                ctx.fillStyle = "blue";
                @foreach (BoreholeViewModel viewModel in Model)
                {
                    <text>
                            ctx.beginPath();
                            ctx.arc(@(viewModel.X * factor), @(500 - (viewModel.Y * factor)), 5, 0, 2 * Math.PI);
                            ctx.fill();
                    </text>
                }

                const render = (e) => {
                    if (start) drawBox(e);
                }

                const drawBox = (e) => {
                    ctx.clearRect(start.x, start.y, e.offsetX - start.x, e.offsetY - start.y);
                    ctx.strokeRect(start.x, start.y, e.offsetX - start.x, e.offsetY - start.y);
                };

                canvas[0].onmousedown = e => { start = { x: e.offsetX, y: e.offsetY }; startCoord = { x: Math.floor(e.offsetX / @factor), y: Math.floor((500 - e.offsetY) / @factor) }; };
                canvas[0].onmouseup = e => {
                    var endX = Math.floor(e.offsetX / @factor);
                    var endY = Math.floor((500 - e.offsetY) / @factor);
                    var loc = `@Url.Action("GetByArea", "Borehole")/${startCoord.x}/${startCoord.y}/${endX}/${endY}`;

                    window.location.href = loc;
                }
                canvas[0].onmousemove = render;
            }
        }

        $(document).ready(draw());

    </script>
}